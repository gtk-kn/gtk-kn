{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Kotlin/Native bindings for the GTK framework and other GObject-Introspection-based libraries.  Get Started</p> <p> </p> <ul> <li> <p>Modern Native Apps</p> <p>Build fast, Kotlin/Native GTK apps with direct system performance, no JVM needed.</p> </li> <li> <p>Familiar Tools</p> <p>IntelliJ IDEA, Gradle, Kotlin \u2014 everything you already know, now for GTK.</p> </li> <li> <p>Linux &amp; macOS Support</p> <p>Develop GTK applications across multiple platforms.</p> </li> </ul> <p></p>"},{"location":"#powered-by","title":"Powered by","text":""},{"location":"contributor-guide/","title":"Contributor Guide","text":"<p>Thank you for your interest in contributing to gtk-kn! \ud83c\udf89</p> <p>We appreciate all contributions, whether you\u2019re fixing a bug, adding features, or improving the documentation. Before you begin, please read our full Contribution Guidelines.</p>"},{"location":"contributor-guide/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"contributor-guide/#hardware-requirements","title":"Hardware Requirements","text":"<p>Building gtk-kn requires a significant amount of system resources. We recommend at least 16GB of RAM (more is better) and a fast CPU.</p>"},{"location":"contributor-guide/#software-requirements","title":"Software Requirements","text":"<p>To set up the required dependencies, follow the instructions in the Environment Setup Guide.</p> <p>Note</p> <p>The Environment Setup Guide contains instructions for both:</p> <ul> <li>Application developers who use <code>gtk-kn</code> to build apps.</li> <li>Contributors who want to build and modify <code>gtk-kn</code> itself.</li> </ul> <p>\ud83d\udee0\ufe0f As a contributor, skip the app developer instructions and focus on the CI setup scripts. These scripts:</p> <ul> <li>Install all required dependencies for your OS.</li> <li>Match the exact environment used in CI, ensuring a consistent build setup.</li> </ul>"},{"location":"contributor-guide/#jdk-requirement","title":"JDK Requirement","text":"<p>gtk-kn requires JDK 17. Newer versions may not work, so make sure you\u2019re using the correct version.</p>"},{"location":"contributor-guide/#cloning-the-repository","title":"Cloning the Repository","text":"<p>The main repository is hosted on GitLab. A mirror is also available on GitHub.</p>"},{"location":"contributor-guide/#clone-with-submodules","title":"Clone with Submodules","text":"<p>The project uses Git submodules, so it must be cloned with the <code>--recurse-submodules</code> flag:</p> <pre><code>git clone --recurse-submodules https://gitlab.com/gtk-kn/gtk-kn.git\ncd gtk-kn\n</code></pre> <p>If you forget to use <code>--recurse-submodules</code>, you can initialize and update them manually:</p> <pre><code>git submodule init\ngit submodule update\n</code></pre>"},{"location":"contributor-guide/#working-with-bindings","title":"Working with Bindings","text":""},{"location":"contributor-guide/#pre-generated-bindings","title":"Pre-Generated Bindings","text":"<p>The project comes with pre-generated bindings for a specific Linux distribution. These bindings allow them to be searchable and viewable online, but may not always match your system if you are using a different Linux distribution or version.</p>"},{"location":"contributor-guide/#generating-new-bindings","title":"Generating New Bindings","text":"<p>To generate bindings that match your system, use the following Gradle task:</p> <pre><code>./gradlew :gir:run\n</code></pre> <p>These are all the Gradle tasks that allow you to manipulate the bindings:</p> Task Description <code>cleanBindings</code> Deletes all generated bindings. <code>:gir:run</code> Generates new bindings from the GIR files on your system. (Automatically runs <code>cleanBindings</code> first.) <code>revertBindings</code> Restores bindings to their last committed state. (Removes unversioned changes.) <p>After generating the bindings, you can compile and validate them by running:</p> <pre><code>./gradlew check\n</code></pre> <p>This will compile the bindings and run static analysis to ensure everything is working correctly.</p>"},{"location":"contributor-guide/#running-a-sample-application","title":"Running a Sample Application","text":"<p>After setting up the environment and generating bindings, it\u2019s a good idea to run a sample app to verify that everything is working.</p> <p>To run the Playground sample app:</p>"},{"location":"contributor-guide/#on-linux","title":"On Linux","text":"<pre><code>./gradlew samples:playground:runDebugExecutableLinuxX64\n</code></pre>"},{"location":"contributor-guide/#on-macos","title":"On macOS","text":"<pre><code>./gradlew samples:playground:runDebugExecutableMacosArm64\n</code></pre> <p>If everything is set up correctly, a GTK window should appear.</p>"},{"location":"contributor-guide/deploying-to-mavenlocal/","title":"Deploying to MavenLocal","text":""},{"location":"contributor-guide/deploying-to-mavenlocal/#what-is-mavenlocal","title":"What is MavenLocal?","text":"<p>MavenLocal is a local repository that stores locally built or deployed artifacts.</p> <p>This allows you to use locally built dependencies without needing to publish them to a remote repository.</p>"},{"location":"contributor-guide/deploying-to-mavenlocal/#why-deploy-to-mavenlocal","title":"Why Deploy to MavenLocal?","text":"<p>By default, when you build <code>gtk-kn</code> from source, its artifacts are not automatically available to other projects on your system. Deploying to MavenLocal allows you to:</p> <ol> <li>Use your locally built version of <code>gtk-kn</code> in other projects.</li> <li>Test changes before publishing them remotely.</li> </ol>"},{"location":"contributor-guide/deploying-to-mavenlocal/#deploying-gtk-kn-to-mavenlocal","title":"Deploying <code>gtk-kn</code> to MavenLocal","text":""},{"location":"contributor-guide/deploying-to-mavenlocal/#generate-the-binding-source-code","title":"Generate the Binding Source Code","text":"<p>Before deploying, generate the GTK bindings from your system\u2019s GIR files:</p> <pre><code>./gradlew :gir:run\n</code></pre>"},{"location":"contributor-guide/deploying-to-mavenlocal/#publish-artifacts-to-mavenlocal","title":"Publish Artifacts to MavenLocal","text":"<p>Run the appropriate command for your OS:</p>"},{"location":"contributor-guide/deploying-to-mavenlocal/#linux","title":"Linux","text":"<pre><code>./gradlew publishLinuxX64PublicationToMavenLocal :gradle-plugin:publishToMavenLocal\n</code></pre>"},{"location":"contributor-guide/deploying-to-mavenlocal/#macos","title":"macOS","text":"<pre><code>./gradlew publishMacosArm64PublicationToMavenLocal :gradle-plugin:publishToMavenLocal\n</code></pre> <p>This will install the artifacts into your local Maven repository (<code>~/.m2/repository</code>).</p>"},{"location":"contributor-guide/deploying-to-mavenlocal/#verify-the-installation","title":"Verify the Installation","text":"<p>To ensure the artifacts were published, check the local repository:</p> <pre><code>ls ~/.m2/repository/org/gtkkn/\n</code></pre>"},{"location":"contributor-guide/deploying-to-mavenlocal/#use-mavenlocal-in-your-project","title":"Use MavenLocal in Your Project","text":"<p>To allow your project to find the locally built <code>gtk-kn</code> artifacts, update <code>settings.gradle.kts</code>:</p> <pre><code>pluginManagement {\n    repositories {\n        mavenLocal()  // Ensure MavenLocal is listed first\n        gradlePluginPortal()\n        mavenCentral()\n    }\n}\n\ndependencyResolutionManagement {\n    repositories {\n        mavenLocal()  // Ensure MavenLocal is listed first\n        mavenCentral()\n    }\n}\n</code></pre>"},{"location":"contributor-guide/deploying-to-mavenlocal/#youre-all-set","title":"You\u2019re All Set! \ud83d\ude80","text":"<p>Now your project can use locally built versions of <code>gtk-kn</code> without needing a remote repository. \ud83c\udf89</p>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>The <code>gtk-kn</code> project provides Kotlin/Native bindings for GTK and related libraries, enabling developers to build native GTK applications using Kotlin.</p>"},{"location":"developer-guide/#who-should-use-this-guide","title":"Who Should Use This Guide?","text":"<p>This guide is for developers who want to build graphical applications with GTK and Kotlin/Native. It assumes:</p> <ul> <li>Basic experience with Kotlin (if you\u2019re new, check   out Kotlin\u2019s learning resources).</li> <li>A desire to develop native GUI applications with GTK.</li> </ul> <p>No prior knowledge of GTK or GObject-Introspection is required, as this guide will introduce key concepts along the way.</p>"},{"location":"developer-guide/#how-to-use-this-guide","title":"How to Use This Guide","text":"<p>This guide is structured to help you get started quickly and serve as a reference for building GTK applications with <code>gtk-kn</code>. You can:</p> <ul> <li>Follow it sequentially if you\u2019re new to GTK and want a structured learning experience.</li> <li>Jump to specific sections when looking for details on a particular feature.</li> </ul> <p>We focus on practical examples to demonstrate GTK concepts in real-world applications. In some cases, you may encounter simplified examples designed to clarify complex topics.</p> <p>For additional code samples, refer to the gtk-kn repository.</p>"},{"location":"developer-guide/#modifying-or-generating-bindings","title":"Modifying or Generating Bindings?","text":"<p>If you\u2019re interested in contributing to <code>gtk-kn</code>, modifying the bindings, or generating your own artifacts, check out the Contributor Guide. It covers everything you need to know about building <code>gtk-kn</code>, working with GObject-Introspection, and contributing to the project.</p>"},{"location":"developer-guide/environment-setup/","title":"Environment Setup","text":"<p>To develop a <code>gtk-kn</code> application, you need:</p> <ul> <li>The Kotlin/Native toolchain, which requires a Java environment (only for Gradle, not the actual application)</li> <li>The GTK 4 library and dependencies</li> </ul> <p>Most Linux distributions require only three essential packages to build and run GTK applications:</p> <ul> <li>pkgconf</li> <li>gobject-introspection (or libgirepository)</li> <li>libadwaita</li> </ul> <p>However, if you\u2019re missing additional dependencies or want to build the gtk-kn itself, you can use the installation scripts provided below.</p>"},{"location":"developer-guide/environment-setup/#requirements-by-os","title":"Requirements by OS","text":""},{"location":"developer-guide/environment-setup/#linux","title":"Linux","text":"<p>The <code>gtk-kn</code> project supports development on major Linux distributions. Our CI tests ensure compatibility with the latest stable versions of:</p> <ul> <li>Arch Linux</li> <li>Fedora</li> <li>openSUSE Tumbleweed</li> <li>Ubuntu LTS</li> </ul> <p>For most distributions, installing these three packages is enough:</p> <pre><code>sudo apt install pkgconf libgirepository1.0-dev libadwaita-1-dev  # Ubuntu/Debian\nsudo dnf install pkgconf gobject-introspection-devel libadwaita-devel  # Fedora\nsudo pacman -S pkgconf gobject-introspection libadwaita  # Arch Linux\nsudo zypper install pkgconf gobject-introspection-devel libadwaita-devel  # openSUSE\n</code></pre> <p>If you\u2019re missing dependencies or need to build the gtk-kn itself, use these scripts:</p>"},{"location":"developer-guide/environment-setup/#arch-linux","title":"Arch Linux","text":"docker/archlinux/install-archlinux-deps.sh<pre><code># Update the system and package lists\npacman -Syu --noconfirm\n\n# Install packages without prompts\npacman -S --noconfirm \\\n  git \\\n  libxcrypt-compat \\\n  pkgconf \\\n  jdk17-openjdk \\\n  python-pip \\\n  gcc-multilib \\\n  glib2 \\\n  gobject-introspection \\\n  libadwaita \\\n  gtksourceview5 \\\n  webkitgtk-6.0\n\n# Clean up package cache to reduce image size\npacman -Scc --noconfirm\n</code></pre>"},{"location":"developer-guide/environment-setup/#fedora","title":"Fedora","text":"docker/fedora/install-fedora-deps.sh<pre><code># Update package lists\ndnf check-update || true\n\n# Install packages without prompts\ndnf install -y \\\n  git \\\n  libxcrypt-compat \\\n  java-17-openjdk-devel \\\n  python3-pip \\\n  gcc \\\n  glib2-devel \\\n  gobject-introspection-devel \\\n  libadwaita-devel \\\n  gtksourceview5-devel \\\n  webkitgtk6.0-devel\n\n# Clean up package lists to reduce image size\ndnf clean all\n</code></pre>"},{"location":"developer-guide/environment-setup/#opensuse-tumbleweed","title":"openSUSE Tumbleweed","text":"docker/opensuse-tumbleweed/install-opensuse-tumbleweed-deps.sh<pre><code># Update package lists\nzypper refresh\n\n# Install packages without prompts\nzypper install -y \\\n  git \\\n  java-17-openjdk-devel \\\n  python3-pip \\\n  gcc \\\n  glib2-devel \\\n  gobject-introspection-devel \\\n  libadwaita-devel \\\n  gtksourceview5-devel \\\n  webkit2gtk4-devel\n\n# Clean up package lists to reduce image size\nzypper clean --all\n</code></pre>"},{"location":"developer-guide/environment-setup/#ubuntu-lts","title":"Ubuntu LTS","text":"docker/ubuntu/install-ubuntu-deps.sh<pre><code># Update package lists\napt-get update\n\n# Install packages without prompts\nDEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n  git \\\n  apt-utils \\\n  openjdk-17-jdk-headless \\\n  python3-pip \\\n  gcc-multilib \\\n  libgirepository1.0-dev \\\n  libadwaita-1-dev \\\n  libgtksourceview-5-dev \\\n  libwebkitgtk-6.0-dev\n\n# Clean up package lists\napt-get clean\n</code></pre>"},{"location":"developer-guide/environment-setup/#macos-apple-silicon-only","title":"macOS (Apple Silicon Only)","text":"<p><code>gtk-kn</code> now supports macOS on Apple Silicon (arm64). To get started:</p> <ol> <li> <p>Install Xcode:    Ensure Xcode is installed manually via the Mac App Store or from    the Apple Developer website. Xcode is required to provide essential build    tools.</p> </li> <li> <p>Install Dependencies:    Use the following script to set up additional dependencies:</p> </li> </ol> .ci/install_macos_deps.sh<pre><code># Check if Xcode is installed\nif ! /usr/bin/xcrun xcodebuild -version &amp;&gt; /dev/null\nthen\n  echo \"Xcode is not installed or the license has not been accepted. Please install Xcode and accept the license to proceed.\"\n  exit 1\nfi\n\n# Check if Homebrew is installed, install if missing\nif ! command -v brew &amp;&gt; /dev/null\nthen\n  echo \"Homebrew not found. Installing...\"\n  /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nfi\n\n# Update Homebrew\nbrew update\n\n# Install packages\nbrew install \\\n  openjdk@17 \\\n  pkgconf \\\n  gobject-introspection \\\n  gtk4 \\\n  libadwaita \\\n  gtksourceview5\n</code></pre>"},{"location":"developer-guide/environment-setup/#windows","title":"Windows","text":"<p>Windows Support Planned</p> <p>Windows support is planned, enabling developers to create cross-platform GUI applications that run on Linux, macOS, and Windows.</p>"},{"location":"developer-guide/environment-setup/#editor-or-integrated-development-environment-ide","title":"Editor or Integrated Development Environment (IDE)","text":"<p>While any editor that supports Kotlin can be used, we recommend using IntelliJ IDEA for the best development experience.</p>"},{"location":"developer-guide/environment-setup/#next-steps","title":"Next Steps","text":"<p>Once your development environment is set up, you\u2019re ready to create your first gtk-kn application.</p> <p>\ud83d\udc49 Follow the Get Started guide for step-by-step instructions on setting up a Hello World GTK project using Kotlin/Native.</p>"},{"location":"developer-guide/gradle-plugin/","title":"Gradle Plugin for gtk-kn","text":"<p>The <code>org.gtkkn.application</code> Gradle plugin simplifies the process of building and deploying applications with <code>gtk-kn</code>. It automates the configuration of entry point definition, GObject library versions and resource embedding, reducing boilerplate code and simplifying project setup.</p>"},{"location":"developer-guide/gradle-plugin/#binary-entry-point","title":"Binary Entry Point","text":"<p>By default, when building a Kotlin/Native executable, you need to specify the entry point manually in your <code>build.gradle.kts</code> configuration. The <code>org.gtkkn.application</code> plugin provides a more convenient way to define the entry point, avoiding unnecessary boilerplate.</p> <p>You can specify the entry point directly in the <code>gtkKn</code> block:</p> <pre><code>gtkKn {\n    entryPoint = \"com.example.main\"\n}\n</code></pre> <p>This eliminates the need to manually configure the <code>entryPoint</code> property inside the <code>binaries</code> block, reducing boilerplate code like:</p> <pre><code>kotlin {\n    val hostOs = OperatingSystem.current()\n    val isArm64 = System.getProperty(\"os.arch\") == \"aarch64\"\n    val nativeTarget = when {\n        hostOs.isLinux &amp;&amp; !isArm64 -&gt; linuxX64()\n        hostOs.isMacOsX &amp;&amp; isArm64 -&gt; macosArm64()\n        else -&gt; throw GradleException(\"Host OS '${hostOs}' is not supported by gtk-kn.\")\n    }\n    nativeTarget.apply {\n        binaries {\n            executable {\n                entryPoint = \"main\"\n            }\n        }\n    }\n}\n</code></pre> <p>By specifying the <code>entryPoint</code> in <code>gtkKn</code>, the plugin takes care of setting the correct entry point for the executable, making the build configuration cleaner and more maintainable.</p>"},{"location":"developer-guide/gradle-plugin/#targeting-library-versions","title":"Targeting Library Versions","text":"<p>One of the core features of the plugin is the ability to specify target versions for each GObject library. By setting a target version, the build process will automatically enable compatibility for all APIs up to and including the specified version, ensuring access to newer features while maintaining control over API level compatibility.</p> <p>For example, to set the target version for the <code>gio</code> and <code>gtk</code> libraries, add the following to your <code>build.gradle.kts</code>:</p> <pre><code>gtkKn {\n    targetLibraryVersions.putAll(mapOf(\"gio\" to \"2.28\", \"gtk\" to \"4.10\"))\n}\n</code></pre> <p>In this configuration, the project will opt into all <code>gtk</code> APIs up to version 4.10. This eliminates the need to manually specify each version, making it easier to manage version compatibility across your project.</p>"},{"location":"developer-guide/gradle-plugin/#manual-opt-in-without-the-plugin","title":"Manual Opt-In (Without the Plugin)","text":"<p>It\u2019s still possible to opt into specific versions manually without using the plugin. However, in this case, each target version must be added individually, as shown below:</p> <pre><code>sourceSets.configureEach {\n    languageSettings {\n        // Opt in to the required annotations\n        optIn(\"org.gtkkn.bindings.gtk.annotations.GtkVersion4_2\")\n        optIn(\"org.gtkkn.bindings.gtk.annotations.GtkVersion4_4\")\n        optIn(\"org.gtkkn.bindings.gtk.annotations.GtkVersion4_6\")\n        optIn(\"org.gtkkn.bindings.gtk.annotations.GtkVersion4_8\")\n        optIn(\"org.gtkkn.bindings.gtk.annotations.GtkVersion4_10\")\n    }\n}\n</code></pre> <p>While this approach provides the same compatibility, using the Gradle plugin streamlines this process and reduces the maintenance effort.</p>"},{"location":"developer-guide/gradle-plugin/#ignoring-unresolved-symbols-in-object-files","title":"Ignoring Unresolved Symbols in Object Files","text":"<p>When including a gtk-kn dependency in your project, you may encounter linker errors such as:</p> <pre><code>ld.lld: error: undefined symbol: &lt;some native symbol&gt;\n</code></pre> <p>These errors usually occur when one of the project dependencies references symbols from a native library version different from the one installed on your system. If these symbols are not required for your application, they can be safely ignored during linking.</p> <p>The <code>org.gtkkn.application</code> plugin automatically applies the appropriate linker options based on your operating system:</p>"},{"location":"developer-guide/gradle-plugin/#linux","title":"Linux","text":"<p>For Linux, the linker option <code>--unresolved-symbols=ignore-in-object-files</code> is added:</p> <pre><code>freeCompilerArgs += listOf(\"-linker-option\", \"--unresolved-symbols=ignore-in-object-files\")\n</code></pre> <p>This instructs the linker to skip unresolved symbols in object files while still enforcing symbol resolution in shared libraries. This ensures the build succeeds without risking runtime issues for unused symbols.</p>"},{"location":"developer-guide/gradle-plugin/#macos","title":"macOS","text":"<p>For macOS, where <code>--unresolved-symbols</code> is not supported, the following linker options are used:</p> <pre><code>freeCompilerArgs += listOf(\n    \"-linker-option\", \"-undefined\",\n    \"-linker-option\", \"dynamic_lookup\"\n)\n</code></pre> <p>This tells the linker to ignore unresolved symbols and defer their resolution to runtime. Symbols that are never accessed will not cause any issues, but if they are accessed and remain unresolved, the program will crash.</p> <p>These settings ensure compatibility across platforms while avoiding linker errors for unused symbols. If you\u2019re still seeing this error, the issue might lie elsewhere in your setup.</p>"},{"location":"developer-guide/gradle-plugin/#embedding-gresources","title":"Embedding GResources","text":"<p>The <code>org.gtkkn.application</code> plugin also supports embedding resources\u2014such as images, CSS, and UI files\u2014directly into the application binary. This feature simplifies resource management, as embedded resources become part of the application\u2019s executable, accessible without external dependencies.</p> <p>To use this feature, place your resources in the <code>src/gresources/main</code> directory, then add the following configuration to your <code>build.gradle.kts</code>:</p> <pre><code>kotlin.linuxX64.gtk {\n    gresources.main.embed(project.nativeTergetCompilation())\n}\n</code></pre> <p>By embedding resources directly, your application becomes more self-contained, with all necessary files bundled within the binary.</p>"},{"location":"developer-guide/logging/","title":"Logging in <code>gtk-kn</code>","text":""},{"location":"developer-guide/logging/#overview","title":"Overview","text":"<p>The <code>gtk-kn</code> logging API is designed for flexibility and performance, providing features like:</p> <ul> <li>Lazy Evaluation: Log messages are defined as lambdas, evaluated only if logging is enabled, avoiding unnecessary   computation.</li> <li>Automatic Domain Derivation: By default, the log domain is the calling class\u2019s name, simplifying log organization.</li> <li>Customizable Loggers: Choose from built-in logging backends:<ul> <li><code>GLibLogLogger</code>: Integrates with GLib\u2019s logging system.</li> <li><code>LogcatStyleLogger</code>: Mimics Android Logcat formatting.</li> </ul> </li> </ul> <p>Warning</p> <p>To enable logging, a logger (<code>Log</code>) must be explicitly installed. Without a logger, no logs will be generated.</p>"},{"location":"developer-guide/logging/#installing-a-logger","title":"Installing a Logger","text":"<p>You must install a logger before logs are captured. Depending on your needs, you can install a logger for debug builds, release builds, or both.</p>"},{"location":"developer-guide/logging/#install-for-both-debug-and-release-builds","title":"Install for Both Debug and Release Builds","text":"<p>Use this method to enable logging in all build types.</p> <p>Examples:</p> <pre><code>Log.installConsoleLogWriter()\n</code></pre> <pre><code>Log.installConsoleLogWriter(time = false)\n</code></pre> <p>The second example disables timestamps and colors for the log output.</p> <ul> <li><code>time</code>: Adds timestamps to each log message (default: <code>true</code>).</li> </ul>"},{"location":"developer-guide/logging/#install-only-for-debug-builds","title":"Install Only for Debug Builds","text":"<p>Use this method to enable logging only during development.</p> <pre><code>Log.installConsoleLogWriterForDebugBuilds(time = true)\n</code></pre> <ul> <li>Typically used for verbose debugging information.</li> <li>The logger will not be installed in release builds.</li> </ul>"},{"location":"developer-guide/logging/#install-only-for-release-builds","title":"Install Only for Release Builds","text":"<p>Use this method to log messages selectively in release builds.</p> <pre><code>Log.installGLibLogWriterForReleaseBuilds(minLevel = LogLevel.MESSAGE)\n</code></pre> <ul> <li><code>minLevel</code>: The minimum log priority to capture (default: <code>LogPriority.MESSAGE</code>).</li> <li>Useful for filtering out lower-priority logs like <code>DEBUG</code> or <code>INFO</code> in production.</li> </ul> <p>Example:</p> <pre><code>Log.installGLibLogWriterForReleaseBuilds(minPriority = LogPriority.CRITICAL)\n</code></pre> <p>This setup logs only critical and error messages in release builds.</p>"},{"location":"developer-guide/logging/#debug-logs-in-release-builds","title":"Debug Logs in Release Builds","text":"<p>For both loggers, debug logs can still be enabled in release builds using the GLib <code>g_log</code> mechanism:</p> <pre><code>export G_MESSAGES_DEBUG=all\n</code></pre> <p>To restrict debug logs to a specific domain (only works with <code>GLibLogWriter</code>):</p> <pre><code>export G_MESSAGES_DEBUG=my_app\n</code></pre> <p>To disable debug logs in release builds entirely, explicitly set <code>minLevel</code> to <code>LogLevel.MESSAGE</code> or higher.</p>"},{"location":"developer-guide/logging/#logging-messages","title":"Logging Messages","text":"<p>Once a logger is installed, you can use the <code>log</code> function to create logs. It provides several options to customize logging.</p>"},{"location":"developer-guide/logging/#basic-usage","title":"Basic Usage","text":"<pre><code>log { \"This is a debug message\" }\n</code></pre> <ul> <li>Default level: <code>LogLevel.DEBUG</code>.</li> <li>Default domain: Derived automatically from the calling class name.</li> </ul>"},{"location":"developer-guide/logging/#custom-log-domain","title":"Custom Log Domain","text":"<p>Specify a custom domain for the log using the <code>domain</code> parameter. This is helpful for grouping logs by context.</p> <pre><code>log(domain = \"MyComponent\") { \"This is a log from MyComponent\" }\n</code></pre>"},{"location":"developer-guide/logging/#custom-log-level","title":"Custom Log Level","text":"<p>Control the log severity with the <code>level</code> parameter. Available levels:</p> <ul> <li><code>LogLevel.DEBUG</code>: Debugging information.</li> <li><code>LogLevel.INFO</code>: General information.</li> <li><code>LogLevel.MESSAGE</code>: Non-critical notifications.</li> <li><code>LogLevel.WARNING</code>: Warnings that do not interrupt execution.</li> <li><code>LogLevel.CRITICAL</code>: Critical issues requiring attention.</li> <li><code>LogLevel.ERROR</code>: Fatal errors (Note: it will terminate the application with a <code>SIGTRAP</code>!).</li> </ul> <p>Example:</p> <pre><code>log(level = LogLevel.WARNING) { \"This is a warning message\" }\n</code></pre> <p>Warning</p> <p>Use <code>LogLevel.CRITICAL</code> for critical issues that are non-fatal. Use <code>LogLevel.ERROR</code> only if termination is desired.</p>"},{"location":"developer-guide/logging/#logging-outside-a-class","title":"Logging Outside a Class","text":"<p>Use the overload of the <code>log</code> function when <code>this</code> is unavailable, such as in top-level functions or static contexts.</p> <pre><code>log(domain = \"GlobalDomain\", level = LogLevel.INFO) { \"This is a global log message\" }\n</code></pre>"},{"location":"developer-guide/logging/#logging-exceptions","title":"Logging Exceptions","text":"<p>Log exceptions directly using the <code>org.gtkkn.extensions.glib.util.log</code> function. Choose the appropriate priority level.</p> <pre><code>try {\n    // Some operation that might fail\n} catch (e: Exception) {\n    log(LogLevel.CRITICAL) { \"Critical error: ${e.message}\" }\n}\n</code></pre>"},{"location":"developer-guide/logging/#examples-of-log-output","title":"Examples of Log Output","text":""},{"location":"developer-guide/logging/#setup-example-logs","title":"Setup Example Logs","text":"<pre><code>fun printLogs() {\n    log(LogLevel.DEBUG) { \"This is a debug message\" }\n    log(LogLevel.INFO) { \"This is an info message\" }\n    log(LogLevel.MESSAGE) { \"This is a message\" }\n    log(LogLevel.WARNING) { \"This is a warning message\" }\n    log(LogLevel.CRITICAL) { \"This is a critical message\" }\n    log(LogLevel.ERROR) { \"This is an error message\" }\n}\n</code></pre>"},{"location":"developer-guide/logging/#using-logcatstylelogger","title":"Using <code>LogcatStyleLogger</code>","text":"<p>Setup:</p> <pre><code>Log.installConsoleLogWriter(time = true)\nprintLogs()\n</code></pre> <p>Output:</p> <pre><code>12-12 17:12:07.282 194173 D ApplicationWindow: This is a debug message\n12-12 17:12:07.282 194173 I ApplicationWindow: This is an info message\n12-12 17:12:07.282 194173 M ApplicationWindow: This is a message\n12-12 17:12:07.282 194173 W ApplicationWindow: This is a warning message\n12-12 17:12:07.282 194173 C ApplicationWindow: This is a critical message\n12-12 17:12:07.282 194173 E ApplicationWindow: This is an error message\nLogLevel.ERROR is considered fatal and will terminate the application. Use LogLevel.CRITICAL for non-fatal critical errors. Sending SIGTRAP.\n</code></pre>"},{"location":"developer-guide/logging/#using-gliblogwriter","title":"Using <code>GLibLogWriter</code>","text":"<p>Setup:</p> <pre><code>Log.installGLibLogWriter()\nprintLogs()\n</code></pre> <p>Output:</p> <pre><code>(myapp.kexe:195167): ApplicationWindow-DEBUG: 17:14:30.305: This is a debug message\nApplicationWindow-INFO: 17:14:30.305: This is an info message\nApplicationWindow-Message: 17:14:30.305: This is a message\n\n(myapp.kexe:195167): ApplicationWindow-WARNING **: 17:14:30.305: This is a warning message\n\n(myapp.kexe:195167): ApplicationWindow-CRITICAL **: 17:14:30.305: This is a critical message\n\n(myapp.kexe:195167): ApplicationWindow-ERROR **: 17:14:30.305: This is an error message\n</code></pre>"},{"location":"developer-guide/logging/#logger-comparison","title":"Logger Comparison","text":""},{"location":"developer-guide/logging/#glibloglogger","title":"<code>GLibLogLogger</code>","text":"<ul> <li>Integrates with GLib\u2019s native logging system.</li> <li>Respects <code>G_MESSAGES_DEBUG</code> environment variable for enabling debug logs with specific log domains in release builds.</li> </ul>"},{"location":"developer-guide/logging/#logcatstylelogger","title":"<code>LogcatStyleLogger</code>","text":"<ul> <li>Mimics Android\u2019s Logcat formatting.</li> <li>Supports optional timestamps (<code>time</code>) and ANSI color coding (<code>color</code>).</li> <li>Ideal for debugging in console or file-based logs.</li> </ul>"},{"location":"developer-guide/bindings/","title":"Bindings Overview","text":"<p>GTK is a C-based framework, but thanks to GObject-Introspection, it can be used in many programming languages, including Kotlin/Native.</p> <p>The <code>gtk-kn</code> project provides Kotlin/Native bindings for GTK-related libraries, allowing developers to write native GTK applications in pure Kotlin while leveraging the full power of GTK.</p>"},{"location":"developer-guide/bindings/#what-are-language-bindings","title":"What Are Language Bindings?","text":"<p>Language bindings act as a bridge between different programming languages and native libraries. They expose the API of a library (written in one language, like C) in a way that another language (Kotlin/Native) can use seamlessly.</p> <p>With <code>gtk-kn</code>, you can interact with GTK, GIO, Adwaita, and other libraries using a familiar Kotlin API without writing low-level C code.</p>"},{"location":"developer-guide/bindings/#what-youll-find-in-this-section","title":"What You\u2019ll Find in This Section","text":"<p>This section contains documentation and examples for the GTK-related bindings provided by <code>gtk-kn</code>, including:</p> <ul> <li>GTK4 \u2192 Core UI elements and widgets</li> <li>GIO \u2192 System integration features (e.g., file operations, notifications)</li> <li>Adwaita \u2192 Modern GNOME application components</li> </ul> <p>With these bindings, you can build fully functional Kotlin/Native GTK applications without needing to write C code manually.</p>"},{"location":"developer-guide/bindings/adwaita/","title":"Adwaita","text":"<p>Adwaita (Libadwaita or Adw) is a set of widgets and classes that extend the GTK toolkit, the default UI toolkit for GNOME. It\u2019s designed to implement GNOME\u2019s design patterns, as outlined in the GNOME Human Interface Guidelines (HIG). The HIG provides recommendations for creating consistent, intuitive, and accessible user interfaces across GNOME applications.</p> <p>Adwaita offers a range of HIG-compliant widgets, including buttons, switches, and dialogs, that give applications a consistent and modern GNOME look. It supports high-resolution displays, with scalable icons for clarity on various screen sizes.</p> <p>In addition to widgets, Adwaita includes CSS stylesheets that define their visual appearance, offering a flexible way to customize styling while following GNOME\u2019s guidelines. Adwaita also supports dark mode, which can be toggled system-wide or on a per-application basis.</p> <p>Overall, Adwaita is crucial for GNOME, providing a cohesive, modern look that aligns with the GNOME HIG. With support for high-resolution displays and dark mode, it\u2019s a versatile toolkit for building modern, user-friendly desktop applications.</p>"},{"location":"developer-guide/bindings/gio/","title":"GIO","text":""},{"location":"developer-guide/bindings/gio/#file-system-access-operations-gfile","title":"File System Access &amp; Operations: GFile","text":"<p>GIO offers a robust virtual file system layer through the <code>GFile</code> interface, enabling operations such as directory traversal, file metadata querying, and file monitoring.</p>"},{"location":"developer-guide/bindings/gio/#settings-gsettings","title":"Settings: GSettings","text":"<p><code>GSettings</code> is GNOME\u2019s library for managing user settings, allowing storage of various types such as integers and string arrays.</p>"},{"location":"developer-guide/bindings/gio/#notifications-gnotification","title":"Notifications: GNotification","text":"<p><code>GNotification</code> allows applications to send interactive notifications, enabling user interaction through actions like clicks. Notifications are customizable in appearance and behavior, with options for icons and urgency levels.</p>"},{"location":"developer-guide/bindings/gio/#networking","title":"Networking","text":"<p>GIO provides extensive networking capabilities, from high-level network state monitoring to low-level socket and proxy abstractions.</p>"},{"location":"developer-guide/bindings/gio/#gsocket","title":"GSocket","text":"<p><code>GSocket</code> supports network state monitoring, connection creation, network service implementation, and client connection acceptance, along with low-level socket and address handling.</p>"},{"location":"developer-guide/bindings/gio/#tls-dns-support","title":"TLS &amp; DNS Support","text":"<p>GIO supports TLS connections (client and server) and provides resolvers for proxies, names, and services.</p>"},{"location":"developer-guide/bindings/gio/#ipc-gdbus","title":"IPC: GDBus","text":"<p>D-Bus is a primary IPC system in GNOME, used for inter-application and system service communication. <code>GDBus</code>, included in GIO, provides a comprehensive D-Bus implementation with APIs to implement both D-Bus providers and consumers.</p>"},{"location":"developer-guide/bindings/gio/notifications/","title":"Using Notifications","text":"<p>In GNOME applications, notifications inform users about events that need attention. Notifications should be non-intrusive and not overly distracting.</p> <p>Refer to the Human Interface Guidelines for best practices on using notifications.</p> <p>Note</p> <p>Users can disable notifications for specific applications or globally, so avoid relying solely on notifications to convey critical information.</p>"},{"location":"developer-guide/bindings/gio/notifications/#prerequisites","title":"Prerequisites","text":"<p>To use notifications in GNOME, ensure:</p> <ul> <li>Your app uses a GIO <code>Application</code> or a class derived from it, such as GTK <code>Application</code> or ADW <code>Application</code>.</li> <li>A valid desktop file matches your <code>application ID</code>.</li> <li>Your application supports D-Bus activation.</li> </ul> <p>These requirements allow notifications to persist and associate with the app, even when it isn\u2019t running.</p>"},{"location":"developer-guide/bindings/gio/notifications/#notification-structure","title":"Notification Structure","text":"<p>A notification typically includes:</p> <ul> <li>A short title</li> <li>An optional message body</li> <li>An optional icon</li> <li>Optional actions (buttons for user interaction)</li> <li>An optional urgent status</li> </ul>"},{"location":"developer-guide/bindings/gio/notifications/#creating-a-notification","title":"Creating a Notification","text":"<p>To send a notification, create a <code>Notification</code> object and add the necessary details:</p> <pre><code>val notification = Notification(\"Lunch is ready\")\nnotification.setBody(\"Today we have pancakes, salad, fruit, and cake for dessert\")\n\nval file = File.newForPath(\"fruitbowl.png\")\nval icon = FileIcon(file)\nnotification.setIcon(icon)\n</code></pre> <p>Keep titles brief, with longer messages in the body. Icons should be legible at small sizes (e.g., 24\u00d724 pixels).</p> <p>To display the notification, use your <code>Application</code> instance:</p> <pre><code>// The application instance will acquire a reference on the\n// notification object\napp.sendNotification(\"lunch-is-ready\", notification)\n</code></pre> <p>Provide an ID for the notification, which allows updating it by re-sending with the same ID. Once sent, the <code>Notification</code> object is independent of the visible notification, so you can release it immediately.</p>"},{"location":"developer-guide/bindings/gio/notifications/#adding-actions","title":"Adding Actions","text":"<p>To allow user interaction, you can add actions to your notification, typically shown as buttons. A default action triggers when the user clicks the notification itself.</p> <pre><code>notification.setDefaultAction(\"app.go-to-lunch\")\nnotification.addButton(\"5 minutes\", \"app.reply-5-minutes\")\nnotification.addButton(\"Order takeout\", \"app.order-takeout\")\n</code></pre> <p>Actions use an <code>app.</code> prefix to indicate they belong to your <code>Application</code>. Only application-level actions work in notifications (no window-specific or keyboard shortcuts).</p>"},{"location":"developer-guide/bindings/gio/notifications/#actions-with-parameters","title":"Actions with Parameters","text":"<p>Pass parameters to actions to make notifications more dynamic. For example, a launch button for a newly installed app:</p> <pre><code>val title = \"$appName is now installed\"\nval notification = Notification(title)\nnotification.addButtonWithTargetValue(\"Launch\", \"app.launch\", Variant.newString(appid))\n\napp.sendNotification(\"app-installed\", notification);\n</code></pre> <p>In your application, define an action that accepts the application ID as a parameter:</p> <pre><code>val action = SimpleAction(\"launch\", VariantType.new(\"s\"))\n\n// Assuming `launchApplication()` is defined elsewhere\naction.onActivate(handler = launchApplication())\napp.addAction(action)\n</code></pre>"},{"location":"developer-guide/bindings/gio/notifications/#removing-notifications","title":"Removing Notifications","text":"<p>If a notification becomes irrelevant, you can withdraw it:</p> <pre><code>if (isNowTeaTime())\n    app.withdrawNotification(\"lunch-is-ready\")\n</code></pre>"},{"location":"developer-guide/bindings/gio/notifications/#disabling-notifications","title":"Disabling Notifications","text":"<p>Allow users to disable notifications if desired. GNOME\u2019s \u201cDo Not Disturb\u201d mode controls notifications globally, but individual applications appear in the \u201cNotifications\u201d settings panel if the following line is added to the desktop file:</p> <pre><code>X-GNOME-UsesNotifications=true\n</code></pre>"},{"location":"developer-guide/bindings/gtk4/","title":"GTK4","text":"<p>GTK (GIMP Toolkit) is a widely used, free software toolkit for building graphical user interfaces (GUIs). Initially created for the GIMP (GNU Image Manipulation Program), GTK has evolved into a versatile toolkit for creating GUIs on Linux, Unix, and Windows. It is developed and maintained by the GNOME Project, which also powers a popular desktop environment for Linux-based systems.</p> <p>GTK4, the latest version of the toolkit, was released in December 2020. Key updates include:</p> <ul> <li>Vulkan Graphics API (experimental): Enhanced performance with hardware acceleration and better GPU support.</li> <li>New Layout Manager: More flexibility in arranging widgets, making interface design simpler and more adaptable.</li> <li>New Widgets: Components like GtkListView allow easy data display in lists.</li> <li>Improved Internationalization: Expanded language support.</li> </ul> <p>GTK4 offers a robust toolkit for creating user interfaces with extensive system-level access and a wide array of widgets for building desktop applications. Its new features make it an ideal choice for modern, high-performance UI development on Linux, Unix, and Windows.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/","title":"Widgets","text":"<p>In GTK4, a widget is a graphical user interface (GUI) component that forms the building blocks of an application\u2019s interface. These reusable components help create a consistent look and feel and include elements like buttons, text boxes, and menus.</p> <p>GTK4 widgets are object-oriented, allowing customization through properties and signals:</p> <ul> <li>Properties manage and retrieve widget states.</li> <li>Signals enable widgets to respond to events like user input or state changes.</li> </ul> <p>Widgets are organized hierarchically, typically starting with a top-level window containing other widgets arranged in a layout.</p> <p>GTK4 provides a wide range of pre-built widgets, such as buttons, text boxes, labels, combo boxes, and tree views, that can be used immediately. It also supports creating custom widgets by subclassing existing ones or building new widgets from scratch.</p> <p>In summary, GTK4 widgets offer a robust, flexible foundation for developing responsive, visually appealing user interfaces for desktop and mobile applications.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/","title":"Visual index","text":""},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/#display-widgets","title":"Display widgets","text":""},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/#buttons","title":"Buttons","text":""},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/#entries","title":"Entries","text":""},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/#containers","title":"Containers","text":""},{"location":"developer-guide/bindings/gtk4/widgets/visual-index/#windows","title":"Windows","text":""},{"location":"developer-guide/bindings/gtk4/widgets/examples/label/","title":"Label","text":"<p>Labels are primarily used for displaying non-editable text in windows, such as placing a title next to an <code>Entry</code> widget. You can set label text in the constructor or later with <code>Label.setText</code> or <code>Label.setMarkup</code>.</p> <p>Label width adjusts automatically, and multi-line labels can be created by including line breaks (<code>\\n</code>) in the text string.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/label/#selectable-labels","title":"Selectable Labels","text":"<p>Labels can be made selectable using <code>Label.selectable</code>, allowing users to copy the text to the clipboard. Only make labels with valuable information (like error messages) selectable.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/label/#text-justification-and-wrapping","title":"Text Justification and Wrapping","text":"<p>The label text can be justified using <code>Label.justify</code>. Word-wrapping, activated with <code>Label.wrap</code>, ensures labels fit neatly within limited space.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/label/#formatting-options","title":"Formatting Options","text":"<p><code>Label</code> supports simple text formatting, allowing text to appear bold, colored, or larger by using the <code>Label.setMarkup</code> method with Pango Markup syntax. For example, <code>&lt;b&gt;bold text&lt;/b&gt;</code> or <code>&lt;s&gt;strikethrough text&lt;/s&gt;</code>.</p> <p>Labels can also display clickable hyperlinks, styled similarly to web browsers with colored, underlined text. Links are created with HTML-like <code>&lt;a&gt;</code> tags and can include a <code>title</code> attribute, which shows as a tooltip.</p> <pre><code>label.setMarkup(\n    \"Go to &lt;a href=\\\"https://www.org\\\" title=\\\"Our website\\\"&gt;GTK4 website&lt;/a&gt; for more\"\n)\n</code></pre>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/label/#mnemonics","title":"Mnemonics","text":"<p>Labels may contain mnemonics, which are underlined characters used for keyboard navigation. Create mnemonics by adding an underscore before the mnemonic character (e.g., <code>\"_File\"</code>) and using <code>Label.newWithMnemonic</code> or <code>Label.setTextWithMnemonic</code>. Mnemonics activate any activatable widget within the label\u2019s container, like a <code>Button</code>. If the target widget isn\u2019t within the same container, use <code>Label.mnemonicWidget</code> to specify the target.</p> <p>Example</p> samples/gtk/widgets/src/nativeMain/kotlin/org/gtkkn/samples/gtk/widgets/Label.kt<pre><code>fun label(): Box {\n    val hbox = Box(Orientation.HORIZONTAL, spacing = 10).apply {\n        homogeneous = false\n        marginStart = 16\n        marginTop = 16\n        marginEnd = 16\n        marginBottom = 16\n    }\n    val vboxLeft = Box(orientation = Orientation.VERTICAL, spacing = 10).apply {\n        homogeneous = false\n        vexpand = true\n        hexpand = true\n    }\n    val vboxRight = Box(orientation = Orientation.VERTICAL, spacing = 10).apply {\n        homogeneous = false\n        vexpand = true\n        hexpand = true\n    }\n\n    hbox.append(vboxLeft)\n    hbox.append(vboxRight)\n\n    val button = getButton()\n    vboxLeft.apply {\n        append(getNormalLabel())\n        append(getLeftJustifiedLabel())\n        append(getRightJustifiedLabel())\n        append(getMarkupLabel())\n        append(getLabelWithMnemonic(button))\n    }\n    vboxRight.apply {\n        append(getLineWrappedLabel())\n        append(getLineWrappedFilledLabel())\n        append(button)\n    }\n\n    return hbox\n}\n\nprivate fun getNormalLabel() =\n    Label(str = \"This is a normal label\").apply {\n        vexpand = true\n        hexpand = true\n    }\n\nprivate fun getLeftJustifiedLabel() = Label(\"\").apply {\n    setText(\"This is a left-justified label.\\nWith multiple lines.\")\n    vexpand = true\n    hexpand = true\n    justify = Justification.LEFT\n}\n\nprivate fun getRightJustifiedLabel() = Label(\"This is a right-justified label.\\nWith multiple lines.\").apply {\n    vexpand = true\n    hexpand = true\n    justify = Justification.RIGHT\n}\n\nprivate fun getLineWrappedLabel() = Label(\n    str = \"This is an example of a line-wrapped label.  It should not be taking up the entire             width \" +\n        \"allocated to it, but automatically wraps the words to fit.\\n     It supports multiple paragraphs correctly, \" +\n        \"and  correctly   adds many          extra  spaces. \",\n).apply {\n    vexpand = true\n    hexpand = true\n    wrap = true\n    maxWidthChars = 32\n}\n\nprivate fun getLineWrappedFilledLabel() = Label(\n    str = \"This is an example of a line-wrapped, filled label. It should be taking up the entire              width \" +\n        \"allocated to it.  Here is a sentence to prove my point.  Here is another sentence. Here comes the sun, do de\" +\n        \" do de do.\\n    This is a new paragraph.\\n    This is another newer, longer, better paragraph.  It is \" +\n        \"coming to an end, unfortunately.\",\n).apply {\n    vexpand = true\n    hexpand = true\n    wrap = true\n    justify = Justification.FILL\n    maxWidthChars = 32\n}\n\nprivate fun getMarkupLabel() = Label(\"\").apply {\n    setMarkup(\n        \"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to \" +\n            \"somewhere in the &lt;a href=\\\"https://www.gtk.org\\\" title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\",\n    )\n    vexpand = true\n    hexpand = true\n    wrap = true\n    maxWidthChars = 48\n}\n\nprivate fun getLabelWithMnemonic(button: Widget) =\n    Label.newWithMnemonic(\"_Press Alt + P to select button to the right\").apply {\n        vexpand = true\n        hexpand = true\n        selectable = true\n        mnemonicWidget = button\n    }\n\nprivate fun getButton() =\n    Button(label = \"It does nothing\").apply {\n        vexpand = true\n        hexpand = true\n    }\n</code></pre>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/progress-bar/","title":"ProgressBar","text":"<p>The <code>ProgressBar</code> widget displays the progress of long-running operations, providing a visual cue to the user. It supports two modes: percentage mode and activity mode.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/progress-bar/#percentage-mode","title":"Percentage Mode","text":"<p>Use percentage mode when the total work can be measured (e.g., reading a set number of bytes from a file). This mode shows a growing bar indicating progress. To update the bar, call <code>ProgressBar.fraction</code> periodically, passing a float value between 0 and 1 to represent the percentage completed.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/progress-bar/#activity-mode","title":"Activity Mode","text":"<p>For operations where the total work is unknown, use activity mode. This mode shows a block moving back and forth to indicate activity. To update, call <code>ProgressBar.pulse</code> periodically. You can also set the step size using <code>ProgressBar.pulseStep</code>.</p>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/progress-bar/#customizing-the-progressbar","title":"Customizing the ProgressBar","text":"<p>By default, the <code>ProgressBar</code> is horizontal and moves left to right, but you can customize it:</p> <ul> <li>Orientation: Set <code>ProgressBar.orientation</code> to switch between horizontal and vertical orientations.</li> <li>Direction: Use <code>ProgressBar.inverted</code> to change the direction the bar fills.</li> <li>Text: Display text inside the progress bar with <code>ProgressBar.setText</code> and control its visibility with   <code>ProgressBar.showText</code>.</li> </ul> <p>Example</p> samples/gtk/widgets/src/nativeMain/kotlin/org/gtkkn/samples/gtk/widgets/ProgressBar.kt<pre><code>private var activityMode: Boolean = false\n\nfun progressBar(): Box {\n    val vbox = Box(orientation = Orientation.VERTICAL, spacing = 6).apply {\n        setMargins(16)\n    }\n\n    val progressBar = ProgressBar().apply {\n        vexpand = true\n        hexpand = true\n    }\n    vbox.append(progressBar)\n\n    val showTextButton = CheckButton(label = \"Show text\")\n    showTextButton.onToggled { onShowTextToggled(showTextButton, progressBar) }\n    vbox.append(showTextButton)\n\n    val activityModeButton = CheckButton(label = \"Activity mode\")\n    activityModeButton.onToggled { onActivityModeToggled(activityModeButton, progressBar) }\n    vbox.append(activityModeButton)\n\n    val rightToLeftButton = CheckButton(label = \"Right to Left\")\n    rightToLeftButton.onToggled { onRightToLeftToggled(rightToLeftButton, progressBar) }\n    vbox.append(rightToLeftButton)\n\n    GLib.timeoutAdd(0, 50.toUInt()) {\n        onTimeout(progressBar)\n    }\n\n    return vbox\n}\n\nprivate fun onShowTextToggled(button: CheckButton, progressBar: ProgressBar) {\n    val showText = button.active\n    val text = if (showText) \"some text\" else null\n    progressBar.text = text\n    progressBar.showText = showText\n}\n\nprivate fun onActivityModeToggled(button: CheckButton, progressBar: ProgressBar) {\n    activityMode = button.active\n    if (activityMode) {\n        progressBar.pulse()\n    } else {\n        progressBar.fraction = 0.0\n    }\n}\n\nprivate fun onRightToLeftToggled(button: CheckButton, progressBar: ProgressBar) {\n    progressBar.inverted = button.active\n}\n\nprivate fun onTimeout(progressBar: ProgressBar): Boolean {\n    if (activityMode) {\n        progressBar.pulse()\n    } else {\n        var newValue = progressBar.fraction + 0.01\n        if (newValue &gt; 1) {\n            newValue = 0.0\n        }\n        progressBar.fraction = newValue\n    }\n    return true\n}\n</code></pre>"},{"location":"developer-guide/bindings/gtk4/widgets/examples/spinner/","title":"Spinner","text":"<p>The <code>Spinner</code> widget displays a small spinning animation, commonly used to indicate ongoing activity when the exact progress is unknown\u2014an alternative to <code>ProgressBar</code> for indefinite loading states.</p> <p>To control the animation, call:</p> <ul> <li><code>Spinner.start</code> to begin spinning</li> <li><code>Spinner.stop</code> to halt the animation</li> </ul> <p>Example</p> samples/gtk/widgets/src/nativeMain/kotlin/org/gtkkn/samples/gtk/widgets/Spinner.kt<pre><code>fun spinner(): Widget {\n    val spinner = Spinner().apply {\n        setSizeRequest(100, 100)\n    }\n\n    val toggleButton = ToggleButton(label = \"Start Spinning\")\n\n    // bind the spinning property of the spinner to the active property of the toggleButton\n    toggleButton.bindProperty(\"active\", spinner, \"spinning\", BindingFlags.DEFAULT)\n\n    // update the text when the button is spinning\n    toggleButton.onClicked {\n        if (toggleButton.active) {\n            toggleButton.setLabel(\"Stop Spinning\")\n        } else {\n            toggleButton.setLabel(\"Start Spinning\")\n        }\n    }\n\n    val box = Box(Orientation.VERTICAL, 20).apply {\n        setMargins(20)\n        append(spinner)\n        append(toggleButton)\n    }\n\n    return box\n}\n</code></pre>"},{"location":"developer-guide/bindings/gtksource/","title":"GtkSourceView","text":"<p>GtkSourceView is an open-source library that provides a text widget for syntax-highlighted code editing and related features like auto-indentation, code folding, and line numbering, making it ideal for text editors and IDEs. This project offers Kotlin/Native bindings for easy integration into GTK applications.</p>"},{"location":"developer-guide/bindings/gtksource/#enabling-gtksourceview","title":"Enabling GtkSourceView","text":"<p>GtkSourceView bindings are not enabled by default and need to be manually added. To do so, move the GtkSourceView entry from <code>ignoredLibraries</code> to <code>libraries</code> in the <code>gtkkn.json</code> file.</p>"},{"location":"developer-guide/bindings/gtksource/#requirements","title":"Requirements","text":"<p>To generate bindings, install GtkSourceView on your system:</p> <pre><code>sudo apt install libgtksourceview-5-dev\n</code></pre>"},{"location":"developer-guide/bindings/gtksource/#example","title":"Example","text":"<p>The following example demonstrates how to create a simple application using GtkSourceView with syntax highlighting for Kotlin code. The app includes options to show or hide line numbers and toggle between using spaces or tabs for indentation.</p> samples/gtksource/sample/src/nativeMain/kotlin/org/gtkkn/samples/gtksource/sample/Main.kt<pre><code>fun main() = Application {\n    // set up a HeaderBar since adw windows don't have any by default\n    val headerBar = HeaderBar().apply {\n        title = \"gtk-kn GtkSourceView\"\n    }\n\n    // setup window layout\n    val layout = Box(Orientation.VERTICAL, 0)\n\n    val sourceView = View()\n    val buffer = Buffer(sourceView.getBuffer().gtkTextBufferPointer.reinterpret())\n\n    val kotlinLanguage = LanguageManager.getDefault().getLanguage(\"kotlin\")\n\n    if (kotlinLanguage != null) {\n        buffer.language = kotlinLanguage\n    } else {\n        log(WARNING) { \"Kotlin language not found\" }\n    }\n\n    buffer.setText(HELLO_WORLD_TEXT)\n\n    sourceView.showLineNumbers = true\n    sourceView.insertSpacesInsteadOfTabs = true\n\n    val scrolledWindow = ScrolledWindow().apply {\n        vexpand = true\n        hexpand = true\n        child = sourceView\n    }\n\n    val spacesForTabCheckButton = CheckButton.newWithLabel(\"Spaces for tab\").apply {\n        active = sourceView.insertSpacesInsteadOfTabs\n        onToggled {\n            log { \"spacesForTabCheckButton Toggled = $active\" }\n            sourceView.insertSpacesInsteadOfTabs = active\n        }\n    }\n\n    val showLineNumberButton = CheckButton.newWithLabel(\"Show line number\").apply {\n        active = sourceView.showLineNumbers\n        onToggled {\n            log { \"showLineNumberButton Toggled = $active\" }\n            sourceView.showLineNumbers = active\n        }\n    }\n\n    headerBar.apply {\n        packStart(showLineNumberButton)\n        packStart(spacesForTabCheckButton)\n    }\n\n    // and add your widget to the layout to display it\n    layout.apply {\n        append(headerBar)\n        append(scrolledWindow)\n    }\n    content = layout\n}\n</code></pre>"},{"location":"developer-guide/bindings/webkitgtk/","title":"Index","text":"<p>Here\u2019s the revised documentation page for WebKitGTK:</p>"},{"location":"developer-guide/bindings/webkitgtk/#webkitgtk","title":"WebKitGTK","text":"<p>WebKitGTK is an open-source web content engine that allows developers to embed web browsing capabilities within GTK-based applications. It supports modern web technologies like HTML5, CSS, and JavaScript, making it a popular choice for creating GTK-based web browsers and tools. This project provides Kotlin/Native bindings for integrating WebKitGTK in Kotlin applications.</p>"},{"location":"developer-guide/bindings/webkitgtk/#enabling-webkitgtk","title":"Enabling WebKitGTK","text":"<p>WebKitGTK bindings are not enabled by default and need to be manually added. To enable WebKitGTK bindings, move the WebKitGTK entry from <code>ignoredLibraries</code> to <code>libraries</code> in the <code>gtkkn.json</code> file.</p>"},{"location":"developer-guide/bindings/webkitgtk/#requirements","title":"Requirements","text":"<p>To generate bindings and run applications using WebKitGTK, install the necessary development package on your system:</p> <pre><code>sudo apt install libwebkitgtk-6.0-dev\n</code></pre>"},{"location":"developer-guide/bindings/webkitgtk/#example-usage","title":"Example Usage","text":"<p>The following example demonstrates how to create a simple web browser using WebKitGTK. This example is adapted from a similar one provided by the Java GI project, which offers JVM bindings. We extend our thanks to the Java GI project for the inspiration and sample code.</p> samples/webkit/browser/src/nativeMain/kotlin/org/gtkkn/samples/webkit/browser/Main.kt<pre><code>@Suppress(\"LongMethod\")\nfun main() = Application {\n    var loading = false\n    // set up a HeaderBar since adw windows don't have any by default\n    val headerBar = org.gtkkn.bindings.adw.HeaderBar()\n\n    // setup window layout\n    val layout = Box(Orientation.VERTICAL, 0)\n\n    // this is where any playground code can run to set up widgets\n    val webView = WebView()\n\n    val back = Button.newFromIconName(\"go-previous-symbolic\").apply {\n        tooltipText = \"Back\"\n        onClicked {\n            log { \"Back clicked\" }\n            webView.goBack()\n        }\n    }\n\n    val forward = Button.newFromIconName(\"go-next-symbolic\").apply {\n        tooltipText = \"Forward\"\n        onClicked {\n            log { \"Forward clicked\" }\n            webView.goForward()\n        }\n    }\n\n    val stopOrReload = Button.newFromIconName(\"process-stop-symbolic\").apply {\n        tooltipText = \"Stop\"\n        onClicked {\n            log { \"Stop clicked\" }\n            if (loading) webView.stopLoading() else webView.reload()\n        }\n    }\n\n    val home = Button.newFromIconName(\"go-home-symbolic\").apply {\n        tooltipText = \"Home\"\n        onClicked {\n            log { \"Home clicked\" }\n            webView.loadUri(HOME_PAGE)\n        }\n    }\n\n    val urlBar = Entry().apply {\n        inputPurpose = InputPurpose.URL\n        hexpand = true\n    }\n\n    // Container for the webview\n    val webViewContainer = Bin().apply {\n        vexpand = true\n        hexpand = true\n        child = webView\n    }\n\n    // When navigating to another page, update the URL bar\n    webView.bindProperty(\"uri\", urlBar.buffer, \"text\", BindingFlags.DEFAULT)\n\n    webView.onLoadChanged { loadEvent: LoadEvent -&gt;\n        when (loadEvent) {\n            STARTED -&gt; {\n                log { \"loadEvent = Started\" }\n                loading = true\n                stopOrReload.setIconName(\"process-stop-symbolic\")\n                stopOrReload.tooltipText = \"Stop\"\n            }\n\n            REDIRECTED -&gt; log { \"loadEvent = Redirected\" }\n            COMMITTED -&gt; log { \"loadEvent = Committed\" }\n            FINISHED -&gt; {\n                log { \"loadEvent = Finished\" }\n                loading = false\n                stopOrReload.setIconName(\"view-refresh-symbolic\")\n                stopOrReload.tooltipText = \"Reload\"\n            }\n        }\n    }\n\n    urlBar.onActivate {\n        var url = urlBar.buffer.text\n        val scheme = Uri.peekScheme(url)\n        if (scheme == null) {\n            url = \"https://$url\"\n        }\n        log { \"load url $url\" }\n        webView.loadUri(url)\n    }\n\n    webView.onNotify { pspecs -&gt;\n        log { \"pspecs = ${pspecs.getName()}\" }\n        if (pspecs.getName() == \"estimated-load-progress\") {\n            urlBar.progressFraction = webView.estimatedLoadProgress\n            if (urlBar.progressFraction == 1.0) {\n                log { \"GLib.timeoutAdd\" }\n                GLib.timeoutAdd(0, 500.toUInt()) {\n                    log { \"progressFraction = 0.0)\" }\n                    urlBar.progressFraction = 0.0\n                    false\n                }\n            }\n        }\n    }\n\n    webView.loadUri(HOME_PAGE)\n\n    headerBar.apply {\n        packStart(back)\n        packStart(forward)\n        packStart(stopOrReload)\n        packStart(home)\n        titleWidget = urlBar\n    }\n\n    // and add your widget to the layout to display it\n    layout.apply {\n        append(headerBar)\n        append(webViewContainer)\n    }\n    content = layout\n}\n\nprivate const val HOME_PAGE = \"https://www.gnome.org/\"\n</code></pre> <p>This sample code creates a basic web browser using WebKitGTK, featuring a <code>WebView</code> widget integrated into a GTK application window and basic URL navigation controls. It demonstrates how to use the Kotlin/Native WebKitGTK bindings to create applications that display and interact with web content.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"Why does my simple project take several minutes to build and link? <p>Long build and link times for simple projects may result from not using Kotlin/Native incremental compilation. To speed up builds, add the following line to your project\u2019s <code>gradle.properties</code> file:</p> <pre><code>kotlin.incremental.native=true\n</code></pre> <p>The first build will take the usual time, but future builds should be much faster, often dropping from minutes to seconds. This setting enables incremental compilation of <code>klib</code> artifacts, reducing delays in subsequent builds.</p> Why does my build fail with <code>ld.lld: error: undefined symbol: &lt;some native symbol&gt;</code>? <p>This error occurs when one of your project\u2019s dependencies references symbols that are unresolved on the host system. This often happens because the dependency was compiled with a different version of a native library than the one installed.</p> <p>If these symbols are not required by your application, you can ignore them by adding the appropriate linker option to your Gradle configuration based on your operating system:</p> <p>For Linux: <pre><code>freeCompilerArgs += listOf(\"-linker-option\", \"--unresolved-symbols=ignore-in-object-files\")\n</code></pre> This tells the linker to skip unresolved symbols in object files, but it will still check for symbols in libraries.</p> <p>For macOS: <pre><code>freeCompilerArgs += listOf(\n    \"-linker-option\", \"-undefined\",\n    \"-linker-option\", \"dynamic_lookup\"\n)\n</code></pre> This tells the linker to ignore unresolved symbols and attempt to resolve them dynamically at runtime if needed.</p> <p>Note: If you\u2019re using the official gtk-kn Gradle plugin, these settings are applied automatically depending on the target operating system. If you\u2019re still seeing this error, the problem may lie elsewhere.</p>"},{"location":"get-started/","title":"Get started","text":"<p>This guide will help you set up gtk-kn and run a Hello World GTK application using IntelliJ IDEA on Linux and macOS.</p> <p>For detailed installation steps, refer to the Developer Guide.</p>"},{"location":"get-started/#prerequisites","title":"Prerequisites","text":""},{"location":"get-started/#install-system-dependencies","title":"Install System Dependencies","text":""},{"location":"get-started/#linux","title":"Linux","text":"<pre><code>sudo apt install libgirepository1.0-dev libadwaita-1-dev\n</code></pre>"},{"location":"get-started/#macos-homebrew","title":"macOS (Homebrew)","text":"<pre><code>brew install pkgconf libadwaita\n</code></pre>"},{"location":"get-started/#install-intellij-idea","title":"Install IntelliJ IDEA","text":"<p>Download and install IntelliJ IDEA (Community Edition is fine).</p>"},{"location":"get-started/#setting-up-the-project","title":"Setting Up the Project","text":""},{"location":"get-started/#create-a-new-kotlin-project","title":"Create a New Kotlin Project","text":"<ul> <li>Open IntelliJ IDEA.</li> <li>Create a new Kotlin project.</li> <li>Set Build System to Gradle (leave other options as default).</li> </ul>"},{"location":"get-started/#configure-gradle","title":"Configure Gradle","text":"<p>Replace the content of <code>settings.gradle.kts</code> (this step won\u2019t be needed once the artifacts are published on MavenCentral and Gradle Plugin Portal):</p> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        mavenCentral()\n        maven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n    }\n}\n\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n        maven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n    }\n}\n</code></pre> <p>Replace the content of <code>build.gradle.kts</code>:</p> <pre><code>plugins {\n    kotlin(\"multiplatform\") version \"2.1.0\"\n    id(\"org.gtkkn.application\") version \"0.0.3-SNAPSHOT\"\n}\n\ngtkKn {\n    entryPoint = \"org.example.main\"\n    targetLibraryVersions.putAll(mapOf(\"gio\" to \"2.28\", \"gtk\" to \"4.10\"))\n}\n\nkotlin {\n    sourceSets {\n        nativeMain {\n            dependencies {\n                implementation(\"org.gtkkn:gtk4-${gtkKn.platformSuffix.get()}:0.0.3-SNAPSHOT\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"get-started/#writing-the-sample-application","title":"Writing the Sample Application","text":""},{"location":"get-started/#create-the-project-structure","title":"Create the Project Structure","text":"<ul> <li>Delete the default <code>src/main/</code> directory.</li> <li>Create the following directory:   <pre><code>src/nativeMain/kotlin/org/example/\n</code></pre></li> </ul>"},{"location":"get-started/#create-mainkt","title":"Create <code>Main.kt</code>","text":"<p>Inside the newly created <code>org/example/</code> directory, create a file named <code>Main.kt</code> and add the following code:</p> <pre><code>import org.gtkkn.bindings.gio.ApplicationFlags\nimport org.gtkkn.bindings.gtk.Application\nimport org.gtkkn.bindings.gtk.ApplicationWindow\nimport org.gtkkn.bindings.gtk.Label\nimport org.gtkkn.extensions.gio.runApplication\nimport org.gtkkn.extensions.glib.util.log.Log\nimport org.gtkkn.extensions.glib.util.log.log\nimport org.gtkkn.extensions.glib.util.log.writer.installConsoleLogWriter\n\nfun main() {\n    Log.installConsoleLogWriter()\n    val app = Application(\"org.example.helloworld\", ApplicationFlags.FLAGS_NONE)\n    app.onActivate {\n        log(\"App\") { \"App Activate\" }\n        ApplicationWindow(app).apply {\n            title = \"gtk-kn Hello world\"\n            setSizeRequest(400, 300)\n            child = Label(\"Hello world!\")\n            present()\n        }\n    }\n    app.runApplication()\n}\n</code></pre>"},{"location":"get-started/#running-the-application","title":"Running the Application","text":""},{"location":"get-started/#option-1-using-intellij-idea","title":"Option 1: Using IntelliJ IDEA","text":"<ul> <li>Open the Gradle tab.</li> <li>Under the Run group, execute:<ul> <li><code>runDebugExecutableLinuxX64</code> (for Linux)</li> <li><code>runDebugExecutableMacosArm64</code> (for macOS)</li> </ul> </li> </ul>"},{"location":"get-started/#option-2-using-terminal","title":"Option 2: Using Terminal","text":"<p>Run the following command:</p> <pre><code>./gradlew runDebugExecutableLinuxX64  # Linux\n./gradlew runDebugExecutableMacosArm64  # macOS\n</code></pre> <p>This will open a GTK Hello World window. \ud83c\udf89</p> <p></p> <p>This Get Started guide provides a quick setup to help you run your first gtk-kn application. For more details, check out the Developer Guide. \ud83d\ude80</p>"}]}