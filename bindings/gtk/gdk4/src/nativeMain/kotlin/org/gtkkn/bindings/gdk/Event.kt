// This is a generated file. Do not modify.
package org.gtkkn.bindings.gdk

import kotlinx.cinterop.CPointer
import kotlinx.cinterop.reinterpret
import org.gtkkn.extensions.glib.ext.asBoolean
import org.gtkkn.extensions.gobject.GeneratedClassKGType
import org.gtkkn.extensions.gobject.KGTyped
import org.gtkkn.extensions.gobject.TypeCompanion
import org.gtkkn.native.gdk.GdkEvent
import org.gtkkn.native.gdk.gdk_event_get_device
import org.gtkkn.native.gdk.gdk_event_get_device_tool
import org.gtkkn.native.gdk.gdk_event_get_display
import org.gtkkn.native.gdk.gdk_event_get_event_sequence
import org.gtkkn.native.gdk.gdk_event_get_event_type
import org.gtkkn.native.gdk.gdk_event_get_modifier_state
import org.gtkkn.native.gdk.gdk_event_get_pointer_emulated
import org.gtkkn.native.gdk.gdk_event_get_seat
import org.gtkkn.native.gdk.gdk_event_get_surface
import org.gtkkn.native.gdk.gdk_event_get_time
import org.gtkkn.native.gdk.gdk_event_get_type
import org.gtkkn.native.gdk.gdk_event_ref
import org.gtkkn.native.gdk.gdk_event_triggers_context_menu
import org.gtkkn.native.gdk.gdk_event_unref
import org.gtkkn.native.glib.guint
import org.gtkkn.native.gobject.GType
import kotlin.Boolean
import kotlin.Unit

/**
 * `GdkEvent`s are immutable data structures, created by GDK to
 * represent windowing system events.
 *
 * In GTK applications the events are handled automatically by toplevel
 * widgets and passed on to the event controllers of appropriate widgets,
 * so using `GdkEvent` and its related API is rarely needed.
 *
 * ## Skipped during bindings generation
 *
 * - parameter `angle`: angle: Out parameter is not supported
 * - parameter `x`: x: Out parameter is not supported
 * - parameter `distance`: distance: Out parameter is not supported
 * - parameter `axes`: axes: Out parameter is not supported
 * - parameter `value`: value: Out parameter is not supported
 * - parameter `out_n_coords`: out_n_coords: Out parameter is not supported
 * - parameter `x`: x: Out parameter is not supported
 */
public open class Event(pointer: CPointer<GdkEvent>) : KGTyped {
    public val gPointer: CPointer<GdkEvent> = pointer

    /**
     * Returns the device of an event.
     *
     * @return a `GdkDevice`
     */
    public open fun getDevice(): Device? = gdk_event_get_device(gPointer)?.run {
        Device(this)
    }

    /**
     * Returns a `GdkDeviceTool` representing the tool that
     * caused the event.
     *
     * If the was not generated by a device that supports
     * different tools (such as a tablet), this function will
     * return null.
     *
     * Note: the `GdkDeviceTool` will be constant during
     * the application lifetime, if settings must be stored
     * persistently across runs, see [method@Gdk.DeviceTool.get_serial].
     *
     * @return The current device tool
     */
    public open fun getDeviceTool(): DeviceTool? = gdk_event_get_device_tool(gPointer)?.run {
        DeviceTool(this)
    }

    /**
     * Retrieves the display associated to the @event.
     *
     * @return a `GdkDisplay`
     */
    public open fun getDisplay(): Display? = gdk_event_get_display(gPointer)?.run {
        Display(this)
    }

    /**
     * Returns the event sequence to which the event belongs.
     *
     * Related touch events are connected in a sequence. Other
     * events typically don't have event sequence information.
     *
     * @return the event sequence that the event belongs to
     */
    public open fun getEventSequence(): EventSequence = gdk_event_get_event_sequence(gPointer)!!.run {
        EventSequence(this)
    }

    /**
     * Retrieves the type of the event.
     *
     * @return a `GdkEvent`Type
     */
    public open fun getEventType(): EventType = gdk_event_get_event_type(gPointer).run {
        EventType.fromNativeValue(this)
    }

    /**
     * Returns the modifier state field of an event.
     *
     * @return the modifier state of @event
     */
    public open fun getModifierState(): ModifierType = gdk_event_get_modifier_state(gPointer).run {
        ModifierType(this)
    }

    /**
     * Returns whether this event is an 'emulated' pointer event.
     *
     * Emulated pointer events typically originate from a touch events.
     *
     * @return true if this event is emulated
     */
    public open fun getPointerEmulated(): Boolean = gdk_event_get_pointer_emulated(gPointer).asBoolean()

    /**
     * Returns the seat that originated the event.
     *
     * @return a `GdkSeat`.
     */
    public open fun getSeat(): Seat? = gdk_event_get_seat(gPointer)?.run {
        Seat(this)
    }

    /**
     * Extracts the surface associated with an event.
     *
     * @return The `GdkSurface` associated with the event
     */
    public open fun getSurface(): Surface? = gdk_event_get_surface(gPointer)?.run {
        Surface(this)
    }

    /**
     * Returns the timestamp of @event.
     *
     * Not all events have timestamps. In that case, this function
     * returns %GDK_CURRENT_TIME.
     *
     * @return timestamp field from @event
     */
    public open fun getTime(): guint = gdk_event_get_time(gPointer)

    /**
     * Increase the ref count of @event.
     *
     * @return @event
     */
    public open fun ref(): Event = gdk_event_ref(gPointer)!!.run {
        Event(this)
    }

    /**
     * Returns whether a `GdkEvent` should trigger a context menu,
     * according to platform conventions.
     *
     * The right mouse button typically triggers context menus.
     *
     * This function should always be used instead of simply checking for
     * event->button == %GDK_BUTTON_SECONDARY.
     *
     * @return true if the event should trigger a context menu.
     */
    public open fun triggersContextMenu(): Boolean = gdk_event_triggers_context_menu(gPointer).asBoolean()

    /**
     * Decrease the ref count of @event.
     *
     * If the last reference is dropped, the structure is freed.
     */
    public open fun unref(): Unit = gdk_event_unref(gPointer)

    public companion object : TypeCompanion<Event> {
        override val type: GeneratedClassKGType<Event> =
            GeneratedClassKGType(gdk_event_get_type()) { Event(it.reinterpret()) }

        init {
            GdkTypeProvider.register()
        }

        /**
         * Get the GType of Event
         *
         * @return the GType
         */
        public fun getType(): GType = gdk_event_get_type()
    }
}
