headers = glib-object.h glib-unix.h
package = org.gtkkn.native.gobject
headerFilter = glib-object.h glib-unix.h gobject/*.h

# pkg-config --cflags gobject-2.0 | tr ' ' '\n' | sed '$!s/$/ \\/'
compilerOpts.linux = \
    -I/usr/include/glib-2.0 \
    -I/usr/lib/glib-2.0/include \
    -I/usr/include/sysprof-6 \
    -pthread

compilerOpts.linux_x64 = \
    -I/usr/lib/x86_64-linux-gnu/glib-2.0/include \
    -I/usr/lib64/glib-2.0/include

compilerOpts.osx = \
    -I/opt/homebrew/Cellar/glib/2.82.4/include \
    -I/opt/homebrew/Cellar/glib/2.82.4/include/glib-2.0 \
    -I/opt/homebrew/Cellar/glib/2.82.4/lib/glib-2.0/include \
    -I/opt/homebrew/opt/gettext/include \
    -I/opt/homebrew/Cellar/pcre2/10.44/include \
    -I/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/ffi

# pkg-config --libs gobject-2.0 | tr ' ' '\n' | sed '$!s/$/ \\/'
linkerOpts.linux = \
    -lgobject-2.0 \
    -lglib-2.0

linkerOpts.osx = \
    -L/opt/homebrew/Cellar/glib/2.82.4/lib \
    -lgobject-2.0 \
    -lglib-2.0 \
    -L/opt/homebrew/opt/gettext/lib \
    -lintl

---

/**
 * Instance struct for custom types defined in Kotlin.
 *
 * Note that this struct is incomplete, normal GObject instance structs contain the full instance struct
 * of the parent class as the first member, but since we do dynamic registration, we don't know up front
 * how large the parent struct is.
 *
 * When registering custom types we calculate the total instance struct size by adding the parent struct
 * and this structs sizes, and we access these fields by offsetting the instance pointer with the size
 * of the parent.
 */
typedef struct {
   // track to avoid double dispose
  int dispose_has_run;
  // store StableRef of the kotlin instance
  void *internal_obj;
  // store StableRef of the kotlin object properties
  void *instance_properties;
} gtkknInstanceStruct;

/**
 * Class struct for custom types defined in Kotlin.
 *
 * Note that this struct is incomplete, the same principle as explained above applies.
 */
typedef struct {
  // store StableRef of the kotlin class properties
  void *class_property_store;
} gtkknClassStruct;
